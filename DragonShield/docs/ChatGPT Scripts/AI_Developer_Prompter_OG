ChatGPT AI Developer Prompt Pack v2.1 (DragonShield) using Codex

ASSUMPTIONS
- Goal: transform a rough ask into a Codex-ready prompt that ships working code on first run.
- Defaults: macOS 14.0+, Xcode 16.x, Swift 5.10+, SwiftUI, Combine, SwiftPM, ASCII-only, zsh.
- DB: dbmate + SQLite; migrations in DragonShield/migrations; 3-digit increasing prefixes; never edit past files.
- Build/test: Makefile targets (build, test, migrate, status). Provide xcodebuild fallbacks.
- If the user asks for another stack, override explicitly and restate commands.

RISKS AND GAPS (mark unknowns with "<- CONFIRM")
- Unstated module/file layout.
- DB details (table names, constraints) and state transitions.
- Third-party packages without exact versions.
- UI acceptance not defined (empty states, error states, accessibility).
- Performance budgets missing.

FINAL PROMPT TEMPLATE (copy and fill)

BEGIN FINAL PROMPT

Role
You are a senior macOS/Swift engineer.

Goal
<One sentence describing the feature/fix and its tests.>

Environment
- OS: macOS 14.0+
- Xcode: 16.x
- Swift: 5.10+
- Package manager: SwiftPM
- Shell: zsh
- DB: SQLite via dbmate (migrations in DragonShield/migrations)
- No network access during build/test.

Architecture
- MVVM with Combine.
- No force-unwraps; dependency injection for data access.
- DB access via a gateway protocol (no SQL in Views).

Contracts (define or update)
- protocol DBGateway { ... }  // methods used by this feature
- ViewModel API surface: public methods/properties
- Data models: value semantics, Codable if persisted

Artifacts (create or edit exactly these files)
- <Sources/<Module>/Models/SomeModel.swift>    // purpose
- <Sources/<Module>/ViewModels/SomeVM.swift>   // purpose
- <Sources/<Module>/Views/SomeView.swift>      // purpose
- <Tests/<Module>Tests/SomeVMTests.swift>      // unit tests
- <DragonShield/migrations/NNN_some_change.sql>  // if DB change

Build and Test Commands
- make build
- make test
- make migrate
- make status
Fallback (if Makefile unavailable):
- xcodebuild -scheme DragonShield -destination "platform=macOS" build
- xcodebuild -scheme DragonShield -destination "platform=macOS" test
- dbmate --migrations-dir "$DRAGONSHIELD_HOME/DragonShield/migrations" --url "$DATABASE_URL" up

Post-Migration Verification (paste the exact queries)
- sqlite3 "$DBFILE" "SELECT rowid, version FROM schema_migrations ORDER BY version;"
- sqlite3 "$DBFILE" "<assertion query 1>"
- sqlite3 "$DBFILE" "<assertion query 2>"

Acceptance Criteria
- Project builds with Xcode 16.x and Swift 5.10+.
- Tests pass on first run; include fixtures for non-trivial logic.
- Views render without runtime warnings; accessibility labels set on interactive elements.
- For DB changes: migration applies, schema_migrations advances, verification queries return expected rows.
- Schema guard honored: code compiles with MIN_SUPPORTED_SCHEMA and TARGET_SCHEMA constants and behaves as specified.
- Package.swift pins exact dependency versions; Package.resolved updated and committed.

Non-Goals
- <Out of scope items>

Open Questions
1) Confirm module and file locations. <- CONFIRM
2) Confirm migration numbering start and next free number. <- CONFIRM
3) Additional acceptance criteria (performance, i18n). <- CONFIRM
4) Feature flags required for rollout? <- CONFIRM

Deliverable Format
- Return full file contents only, one code block per file, paths matching the Artifacts list exactly.
- Use plain ASCII quotes and hyphens only.
- No placeholders like "..."; code must compile.

END FINAL PROMPT

COMMIT MESSAGES (Conventional Commits)
- feat(<area>): concise imperative summary
- fix(<area>): bug fix summary
- db(<area>): migration summary
- test(<area>): unit or UI tests
- docs: changelog entry
