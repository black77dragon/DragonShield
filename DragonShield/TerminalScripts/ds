#!/usr/bin/env bash
#
# ds — clone/checkout & (optionally) rebuild DB, then open DragonShield in Xcode
#
# Usage:
#   ds [-b <branch>] [--rebuild-db]
#
# Parameters:
#   -b, --branch BRANCH    Name of the Git branch to check out (default: main)
#   -r, --rebuild-db       Rebuild and populate the test database (optional)
#   -h, --help             Show this help message and exit
#

set -euo pipefail

# defaults
BRANCH="main"
REBUILD_DB=false

# parse args
while [[ $# -gt 0 ]]; do
  case "$1" in
    -b|--branch)
      BRANCH="$2"
      shift 2
      ;;
    -r|--rebuild-db)
      REBUILD_DB=true
      shift
      ;;
    -h|--help)
      sed -n '1,9p' "$0"
      exit 0
      ;;
    *)
      echo "Unknown option: $1" >&2
      echo "Use -h for help." >&2
      exit 1
      ;;
  esac
done

PROJECTS_DIR="$HOME/Projects"
PROJECT_DIR="$PROJECTS_DIR/DragonShield"
XCODE_PROJ="$PROJECT_DIR/DragonShield.xcodeproj"

# ensure parent directory exists & cd into it before deleting any clone
mkdir -p "$PROJECTS_DIR"
cd "$PROJECTS_DIR"

# 1. Kill Xcode to avoid file locks
killall Xcode &>/dev/null || true

# 2. Remove old clone and re-clone
rm -rf "$PROJECT_DIR"
git clone https://github.com/black77dragon/DragonShield.git
cd DragonShield

# 3. Sync main and checkout branch
git fetch origin
git checkout main
git pull origin main

if [[ "$BRANCH" != "main" ]]; then
  git checkout -b "$BRANCH" "origin/$BRANCH"
else
  echo "Using default branch: main"
fi

# 4. Optionally rebuild & populate the database
if $REBUILD_DB; then
  echo "Rebuilding & populating test database..."
  cd python_scripts
  python3 db_tool.py --all
  # copy any .db files into the Xcode project folder
  cp *.db "$PROJECT_DIR"
  cd "$PROJECT_DIR"
fi

# 5. Open Xcode (edit-only mode—no build/run)
xed "$XCODE_PROJ"
